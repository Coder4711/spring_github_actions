# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release Version'
        required: true
        default: ''
      nextDevelopmentVersion:
        description: 'Next Development Version ("-SNAPSHOT" muss nicht angegeben werden.)'
        required: true
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          #cache: maven
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Build with Maven
        run: mvn -B package --file pom.xml
 
      - name: Build
        run: |
          git config --global user.email "action@hohm.local"
          git config --global user.name "action"
          cd $GITHUB_WORKSPACE/
          mvn --batch-mode release:prepare release:perform \
            -Dusername=$GITHUB_ACCESS_TOKEN \
            -Dpassword=$GITHUB_ACCESS_TOKEN \
            -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
            -DdevelopmentVersion=${{ github.event.inputs.nextDevelopmentVersion }}-SNAPSHOT \
            -Darguments="-Dmaven.javadoc.skip=true" \
            -DskipTests=true \ 
            --settings .github/settings.xml

        env:
          MVN_RELEASE_USERNAME: ${{ secrets.MVN_RELEASE_USERNAME }}
          MVN_RELEASE_TOKEN: ${{ secrets.MVN_RELEASE_TOKEN }}

        # git pull

    #- name: Publish to GitHub Packages Apache Maven
    #  run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
    #  env:
    #    GITHUB_TOKEN: ${{ github.token }}
